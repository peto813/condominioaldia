{
  "name": "critical",
  "version": "0.9.1",
  "description": "Extract & Inline Critical-path CSS from HTML",
  "author": {
    "name": "Addy Osmani"
  },
  "license": "Apache-2.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/addyosmani/critical"
  },
  "scripts": {
    "test": "xo && mocha test/*.js --timeout 100000"
  },
  "files": [
    "cli.js",
    "index.js",
    "lib"
  ],
  "bin": {
    "critical": "cli.js"
  },
  "preferGlobal": true,
  "keywords": [
    "critical",
    "path",
    "css",
    "optimization"
  ],
  "engines": {
    "node": ">=4.0"
  },
  "dependencies": {
    "bluebird": "^3.4.7",
    "chalk": "^2.0.1",
    "cheerio": "^0.22.0",
    "clean-css": "^4.0.6",
    "cli": "^1.0.1",
    "debug": "^2.6.1",
    "filter-css": "^0.1.2",
    "finalhandler": "^1.0.3",
    "fs-extra": "^4.0.0",
    "get-port": "^3.1.0",
    "get-stdin": "^5.0.1",
    "group-args": "^0.1.0",
    "gulp-util": "^3.0.8",
    "imageinliner": "^0.2.4",
    "indent-string": "^3.1.0",
    "inline-critical": "^2.4.2",
    "lodash": "^4.17.4",
    "meow": "^3.7.0",
    "mime-types": "^2.1.14",
    "oust": "^0.4.0",
    "parseurl": "^1.3.1",
    "penthouse": "^0.11.13",
    "postcss": "^6.0.4",
    "postcss-image-inliner": "^1.0.4",
    "request": "^2.79.0",
    "serve-static": "^1.11.2",
    "slash": "^1.0.0",
    "tempfile": "^2.0.0",
    "through2": "^2.0.3",
    "tmp": "^0.0.31",
    "vinyl": "^2.0.1"
  },
  "devDependencies": {
    "async": "^2.1.4",
    "chai": "^4.0.2",
    "co": "^4.6.0",
    "connect": "^3.5.0",
    "json-stable-stringify": "^1.0.1",
    "mocha": "^3.2.0",
    "mockery": "^2.0.0",
    "normalize-newline": "^3.0.0",
    "read-package-json": "^2.0.4",
    "stream-array": "^1.1.2",
    "stream-assert": "^2.0.3",
    "vinyl-source-stream": "^1.1.0",
    "xo": "^0.18.2"
  },
  "xo": {
    "space": 4
  },
  "readme": "# critical [![NPM version][npm-image]][npm-url] [![Linux Build Status][travis-image]][travis-url] [![Windows Build status][appveyor-image]][appveyor-url] [![dependencies Status][depstat-image]][depstat-url] [![devDependencies Status Status][devdepstat-image]][devdepstat-url]\n\nCritical extracts & inlines critical-path (above-the-fold) CSS from HTML\n\n![](https://i.imgur.com/lAzmBD2.png)\n\n\n## Install\n\n```\n$ npm install --save critical\n```\n\n## Build plugins\n\n- [grunt-critical](https://github.com/bezoerb/grunt-critical)\n- Gulp users should use Critical directly\n\n\n## Demo projects\n\n- [Optimize a basic page with Gulp](https://github.com/addyosmani/critical-path-css-demo) with a [tutorial](https://github.com/addyosmani/critical-path-css-demo#tutorial)\n- [Optimize an Angular boilerplate with Gulp](https://github.com/addyosmani/critical-path-angular-demo)\n- [Optimize a Weather app with Gulp](https://github.com/addyosmani/critical-css-weather-app)\n\n\n## Usage\n\nInclude:\n\n```js\nvar critical = require('critical');\n```\n\nFull blown example with available options:\n\n```js\ncritical.generate({\n    // Inline the generated critical-path CSS\n    // - true generates HTML\n    // - false generates CSS\n    inline: true,\n\n    // Your base directory\n    base: 'dist/',\n\n    // HTML source\n    html: '<html>...</html>',\n\n    // HTML source file\n    src: 'index.html',\n\n    // Your CSS Files (optional)\n    css: ['dist/styles/main.css'],\n\n    // Viewport width\n    width: 1300,\n\n    // Viewport height\n    height: 900,\n\n    // Target for final HTML output.\n    // use some CSS file when the inline option is not set\n    dest: 'index-critical.html',\n\n    // Minify critical-path CSS when inlining\n    minify: true,\n\n    // Extract inlined styles from referenced stylesheets\n    extract: true,\n\n    // Complete Timeout for Operation\n    timeout: 30000,\n\n    // Prefix for asset directory\n    pathPrefix: '/MySubfolderDocrot',\n\n    // ignore CSS rules\n    ignore: ['font-face',/some-regexp/],\n\n    // overwrite default options\n    ignoreOptions: {}\n});\n```\n\n### Generate and inline critical-path CSS\n\nBasic usage:\n\n```js\ncritical.generate({\n    inline: true,\n    base: 'test/',\n    src: 'index.html',\n    dest: 'index-critical.html',\n    width: 1300,\n    height: 900\n});\n```\n\n### Generate critical-path CSS\n\nBasic usage:\n\n```js\ncritical.generate({\n    base: 'test/',\n    src: 'index.html',\n    dest: 'styles/main.css',\n    width: 1300,\n    height: 900\n});\n```\n\nGenerate and minify critical-path CSS:\n\n```js\ncritical.generate({\n    base: 'test/',\n    src: 'index.html',\n    dest: 'styles/styles.min.css',\n    minify: true,\n    width: 1300,\n    height: 900\n});\n```\n\nGenerate, minify and inline critical-path CSS:\n\n```js\ncritical.generate({\n    inline: true,\n    base: 'test/',\n    src: 'index.html',\n    dest: 'index-critical.html',\n    minify: true,\n    width: 1300,\n    height: 900\n});\n```\n\nGenerate and return output via callback:\n\n```js\ncritical.generate({\n    base: 'test/',\n    src: 'index.html',\n    width: 1300,\n    height: 900\n}, function (err, output) {\n    // You now have critical-path CSS\n    // Works with and without dest specified\n    ...\n});\n```\n\nGenerate and return output via promise:\n\n```js\ncritical.generate({\n    base: 'test/',\n    src: 'index.html',\n    width: 1300,\n    height: 900\n}).then(function (output) {\n    // You now have critical-path CSS\n    // Works with and without dest specified\n    ...\n}).error(function (err) {\n    ...\n});\n```\n\n### Generate critical-path CSS with multiple resolutions\n\nWhen your site is adaptive and you want to deliver critical CSS for multiple screen resolutions this is a useful option.\n*note:* (your final output will be minified as to eliminate duplicate rule inclusion)\n\n```js\ncritical.generate({\n    base: 'test/',\n    src: 'index.html',\n    dest: 'styles/main.css',\n    dimensions: [{\n        height: 200,\n        width: 500\n    }, {\n        height: 900,\n        width: 1200\n    }]\n});\n```\n\n### Generate critical-path CSS and ignore specific selectors\n\nThis is a usefull option when you e.g. want to defer loading of webfonts or background images.\n\n```js\ncritical.generate({\n    base: 'test/',\n    src: 'index.html',\n    dest: 'styles/main.css',\n    ignore: ['@font-face',/url\\(/]\n});\n```\n\n\n### Options\n\n| Name             | Type               | Default | Description   |\n| ---------------- | ------------------ | ------------- |------------- |\n| inline           | `boolean`|`object` | `false` | Inline critical-path CSS using filamentgroup's loadCSS. Pass an object to configure [`inline-critical`](https://github.com/bezoerb/inline-critical#inlinehtml-styles-options) |\n| base             | `string`           | `path.dirname(src)` or `process.cwd()` | Base directory in which the source and destination are to be written |\n| html             | `string`           | | HTML source to be operated against. This option takes precedence over the `src` option |\n| css              | `array`            | `[]` | An array of paths to css files, or an array of [Vinyl](https://www.npmjs.com/package/vinyl) file objects.\n| src              | `string`           | | Location of the HTML source to be operated against |\n| dest             | `string`           | | Location of where to save the output of an operation (will be relative to base if no absolute path is set) |  \n| destFolder       | `string`           | `''` | Subfolder relative to base directory. Only relevant without src (if raw html is provided) or if the destination is outside base |\n| width            | `integer`          | `900`  | Width of the target viewport |\n| height           | `integer`          | `1300` | Height of the target viewport |\n| dimensions       | `array`            | `[]` | An array of objects containing height and width. Takes precedence over `width` and `height` if set\n| minify           | `boolean`          | `false` | Enable minification of generated critical-path CSS |\n| extract          | `boolean`          | `false` | Remove the inlined styles from any stylesheets referenced in the HTML. It generates new references based on extracted content so it's safe to use for multiple HTML files referencing the same stylesheet. Use with caution. Removing the critical CSS per page results in a unique async loaded CSS file for every page. Meaning you can't rely on cache across multiple pages |\n| inlineImages     | `boolean`          | `false` | Inline images\n| assetPaths       | `array`            | `[]` | List of directories/urls where the inliner should start looking for assets\n| maxImageFileSize | `integer`          | `10240`| Sets a max file size (in bytes) for base64 inlined images\n| timeout          | `integer`          | `30000`| Sets a maximum timeout for the operation\n| pathPrefix       | `string`           | `/` | Path to prepend CSS assets with. You *must* make this path absolute if you are going to be using critical in multiple target files in disparate directory depths. (eg. targeting both `/index.html` and `/admin/index.html` would require this path to start with `/` or it wouldn't work.)\n| include          | `array`            | `[]` | Force include CSS rules. See [`penthouse#usage`](https://github.com/pocketjoso/penthouse#usage-1).\n| ignore           | `array`            | `[]` | Ignore CSS rules. See [`filter-css`](https://github.com/bezoerb/filter-css) for usage examples.\n| ignoreOptions    | `object`           | `{}` | Ignore options. See [`filter-css#options`](https://github.com/bezoerb/filter-css#options).\n| penthouse        | `object`           | `{}` | Configuration options for [`penthouse`](https://github.com/pocketjoso/penthouse).\n\n\n## CLI\n\n```\n$ npm install -g critical\n```\n\ncritical works well with standard input.\n\n```\n$ cat test/fixture/index.html | critical --base test/fixture --inline > index.critical.html\n```\n\nYou can also pass in the critical CSS file as an option.\n\n```\n$ critical test/fixture/index.html --base test/fixture > critical.css\n```\n\n\n## Gulp\n\n```js\nvar gulp = require('gulp');\nvar gutil = require('gulp-util');\nvar critical = require('critical').stream;\n\n// Generate & Inline Critical-path CSS\ngulp.task('critical', function () {\n    return gulp.src('dist/*.html')\n        .pipe(critical({base: 'dist/', inline: true, css: ['dist/styles/components.css','dist/styles/main.css']}))\n        .on('error', function(err) { gutil.log(gutil.colors.red(err.message)); })\n        .pipe(gulp.dest('dist'));\n});\n```\n\n## Why?\n\n### Why is critical-path CSS important?\n\n> CSS is required to construct the render tree for your pages and JavaScript\nwill often block on CSS during initial construction of the page.\nYou should ensure that any non-essential CSS is marked as non-critical\n(e.g. print and other media queries), and that the amount of critical CSS\nand the time to deliver it is as small as possible.\n\n### Why should critical-path CSS be inlined?\n\n> For best performance, you may want to consider inlining the critical CSS\ndirectly into the HTML document. This eliminates additional roundtrips\nin the critical path and if done correctly can be used to deliver a\n“one roundtrip” critical path length where only the HTML is a blocking resource.\n\n\n## FAQ\n\n### Are there any sample projects available using Critical?\n\nWhy, yes!. Take a look at [this](https://github.com/addyosmani/critical-path-css-demo) Gulp project\nwhich demonstrates using Critical to generate and inline critical-path CSS. It also includes a mini-tutorial\nthat walks through how to use it in a simple webapp.\n\n### When should I just use Penthouse directly?\n\nThe main differences between Critical and [Penthouse](https://github.com/pocketjoso/penthouse), a module we\nuse, are:\n\n* Critical will automatically extract stylesheets from your HTML from which to generate critical-path CSS from,\nwhilst other modules generally require you to specify this upfront.\n* Critical provides methods for inlining critical-path CSS (a common logical next-step once your CSS is generated)\n* Since we tackle both generation and inlining, we're able to abstract away some of the ugly boilerplate otherwise\ninvolved in tackling these problems separately.\n\nThat said, if your site or app has a large number of styles or styles which are being dynamically injected into\nthe DOM (sometimes common in Angular apps) I recommend using Penthouse directly. It will require you to supply\nstyles upfront, but this may provide a higher level of accuracy if you find Critical isn't serving your needs.\n\n### What other alternatives to Critical are available?\n\nFilamentGroup maintain a [criticalCSS](https://github.com/filamentgroup/criticalCSS) node module, which\nsimilar to [Penthouse](https://github.com/pocketjoso/penthouse) will find and output the critical-path CSS for\nyour pages.\n\n### Is Critical stable and suitable for production use?\n\nCritical has been used on a number of production sites that have found it stable for everyday use.\nThat said, we welcome you to try it out on your project and report bugs if you find them.\n\n## Can I contribute?\n\nOf course. We appreciate all of our [contributors](https://github.com/addyosmani/critical/graphs/contributors) and\nwelcome contributions to improve the project further. If you're uncertain whether an addition should be made, feel\nfree to open up an issue and we can discuss it.\n\n## Maintainers\n\nThis module is brought to you and maintained by the following people:\n\n* Addy Osmani - Creator ([Github](https://github.com/addyosmani) / [Twitter](https://twitter.com/addyosmani))\n* Ben Zörb - Primary maintainer ([Github](https://github.com/bezoerb) / [Twitter](https://twitter.com/bezoerb))\n\n## License\n\nApache-2.0 © Addy Osmani, Ben Zörb\n\n\n[npm-url]: https://www.npmjs.com/package/critical\n[npm-image]: https://img.shields.io/npm/v/critical.svg\n\n[travis-url]: https://travis-ci.org/addyosmani/critical\n[travis-image]: https://img.shields.io/travis/addyosmani/critical/master.svg?label=Linux%20build\n\n[appveyor-url]: https://ci.appveyor.com/project/addyosmani/critical/branch/master\n[appveyor-image]: https://img.shields.io/appveyor/ci/addyosmani/critical/master.svg?label=Windows%20build\n\n[depstat-url]: https://david-dm.org/addyosmani/critical\n[depstat-image]: https://david-dm.org/addyosmani/critical/status.svg\n\n[devdepstat-url]: https://david-dm.org/addyosmani/critical?type=dev\n[devdepstat-image]: https://david-dm.org/addyosmani/critical/dev-status.svg\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/addyosmani/critical/issues"
  },
  "_id": "critical@0.9.1",
  "dist": {
    "shasum": "8ad27fdf9c34709321eb65594014031e90715d2f"
  },
  "_from": "critical@",
  "_resolved": "https://registry.npmjs.org/critical/-/critical-0.9.1.tgz"
}
