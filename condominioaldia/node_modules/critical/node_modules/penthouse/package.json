{
  "name": "penthouse",
  "description": "Generate critical path CSS for web pages",
  "version": "0.11.13",
  "homepage": "https://github.com/pocketjoso/penthouse",
  "author": {
    "name": "Jonas Ohlsson",
    "email": "jonas.sebastian.ohlsson@gmail.com",
    "url": "https://jonassebastianohlsson.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/pocketjoso/penthouse.git#master"
  },
  "bugs": {
    "url": "https://github.com/pocketjoso/penthouse/issues"
  },
  "license": "MIT",
  "main": "./lib/index.js",
  "engines": {
    "node": ">=4.2.0"
  },
  "scripts": {
    "lint": "standard \"src/**/*.js\"",
    "test": "mocha --compilers js:babel-core/register test/core-tests",
    "test-all": "mocha --compilers js:babel-core/register",
    "precommit": "lint-staged",
    "prepublish": "npm run lint && npm run transpile && cp src/phantomjs/config.json lib/phantomjs/",
    "transpile": "babel -d lib src/"
  },
  "lint-staged": {
    "src/**/*.js": [
      "prettier-standard \"src/**/*.js\"",
      "git add"
    ]
  },
  "dependencies": {
    "apartment": "^1.1.1",
    "css-fork-pocketjoso": "^2.2.1",
    "css-mediaquery": "^0.1.2",
    "jsesc": "^1.0.0",
    "os-tmpdir": "^1.0.1",
    "phantomjs-prebuilt": "^2.1.3",
    "regenerator-runtime": "^0.10.5",
    "tmp": "0.0.31"
  },
  "devDependencies": {
    "babel-cli": "^6.24.1",
    "babel-core": "^6.24.1",
    "babel-preset-env": "^1.4.0",
    "babel-preset-es2015": "^6.24.1",
    "chai": "^1.9.1",
    "css-compare-screenshots": "^0.1.10",
    "global-mocha": "^1.0.1",
    "gm": "^1.21.1",
    "husky": "^0.13.3",
    "lint-staged": "^3.4.1",
    "mocha": "^1.20.1",
    "prettier": "^1.3.1",
    "prettier-standard": "^5.0.0",
    "rimraf": "^2.4.3",
    "standard": "^10.0.2"
  },
  "keywords": [
    "CSS Critical Path Generator",
    "phantomjs",
    "css",
    "performance",
    "build",
    "tool"
  ],
  "files": [
    "lib/**/*.js",
    "lib/phantomjs/config.json"
  ],
  "babel": {
    "presets": [
      [
        "env",
        {
          "targets": {
            "node": 4.2
          }
        }
      ]
    ]
  },
  "readme": "# penthouse\n\n> Critical Path CSS Generator\n\n[![NPM version](https://badge.fury.io/js/penthouse.svg)](http://badge.fury.io/js/penthouse)\n[![Build Status](https://travis-ci.org/pocketjoso/penthouse.svg?branch=master)](https://travis-ci.org/pocketjoso/penthouse)\n[![Downloads](https://img.shields.io/npm/dm/penthouse.svg?style=flat)](https://www.npmjs.com/package/penthouse)\n\n## About\n\nPenthouse is a tool generating critical path CSS for your web pages and web apps in order to speed up page rendering. Supply the tool with your site's full CSS, and the page you want to create the critical CSS for, and it will return all the CSS needed to render the above the fold content of the page. Read more about critical path css [here](http://www.phpied.com/css-and-the-critical-path/).\n\nThe process is automatic and the generated CSS is production ready as is. If you run into problems however, check out the [Problems section](#problems-with-generated-css) further down on this page.\n\n## Usage\n\nPenthouse can be used:\n\n* [as a Node module](#as-a-node-module)\n* [as a Grunt task](https://github.com/fatso83/grunt-penthouse)\n* as a Gulp task (just require Node module straight from your script)\n* via [the online version](#online-version)\n* [from the command line](#from-command-line)\n\n### As a Node module\n\n```\nyarn add --dev penthouse\n```\n(or `npm install`, if not using [yarn](https://yarnpkg.com))\n\nThis will add penthouse to the list of dependencies.\n\n`Penthouse` returns a promise (since version `0.11`),\nbut if you prefer you can also pass in a traditional node-style `callback`\nfunction as the second argument.\n\n```js\nconst penthouse = require('penthouse'),\n    path = require('path'),\n    fs = require('fs'),\n    __basedir = './';\n\npenthouse({\n    url: 'http://google.com',       // can be local html file path\n    css: path.join(__basedir + 'static/main.css'),\n    // OPTIONAL params\n    width: 1300,                    // viewport width\n    height: 900,                    // viewport height\n    forceInclude: [\n      '.keepMeEvenIfNotSeenInDom',\n      /^\\.regexWorksToo/\n    ],\n    timeout: 30000,                 // ms; abort critical CSS generation after this timeout\n    strict: false,                  // set to true to throw on CSS errors (will run faster if no errors)\n    maxEmbeddedBase64Length: 1000,  // characters; strip out inline base64 encoded resources larger than this\n    userAgent: 'Penthouse Critical Path CSS Generator', // specify which user agent string when loading the page\n    renderWaitTime: 100,            // ms; render wait timeout before CSS processing starts (default: 100)\n    blockJSRequests: true,          // set to false to load (external) JS (default: true)\n    phantomJsOptions: {             // see `phantomjs --help` for the list of all available options\n      // 'proxy': 'http://proxy.company.com:8080',\n      // 'ssl-protocol': 'SSLv3'\n    },\n    customPageHeaders: {\n      'Accept-Encoding': 'identity' // add if getting compression errors like 'Data corrupted'\n    }\n})\n.then(criticalCss => {\n    // use the critical css\n    fs.writeFileSync('outfile.css', criticalCss);\n})\n.catch(err => {\n    // handle the error\n})\n```\n\nThe Penthouse Node module can also be used in Gulp.\n\n### Online version\n\n<https://jonassebastianohlsson.com/criticalpathcssgenerator/>\n\n### From command line\n\nThe command line version is no longer supported. Either use the [Node module](#as-a-node-module), or download the last\nsupported command line version and follow the instructions in the README there: [v.0.3.6](https://github.com/pocketjoso/penthouse/releases/tag/v0.3.6).\n\n## Troubleshooting\n\n### Problems with generated CSS\n\nBefore going further, make sure that you fix any errors in your own CSS, as detected by [this AST explorer](http://astexplorer.net/), as they can cause problems with critical CSS generation.\n\nAlso test your url + css in the hosted critical path css generator, to determine whether the problem\nis with the input your passing (css + url), or with your local setup:\nhttps://jonassebastianohlsson.com/criticalpathcssgenerator\n\n#### Unstyled content showing when using the critical css\n\nThe two most common reasons for this:\n\n1. You have an element appearing early in the DOM, but with styles applied to move outside of the critical viewport (using absolute position or transforms). Penthouse will does not look at the absolute position and transform values and will just see the element as not being part of the critical viewport, and hence Penthouse will not consider its styles critical.\nSolution: Consider whether it really should appear so early in the DOM, or use the `forceInclude` property.\n\n2. During render with critical css your page contains some content that Penthouse never saw in the HTML during critical css generation. Perhaps you're a logged in user with the page showing extra content, that were never part of it when Penthouse saw it, or perhaps JS injected some extra content to the page before the full CSS (which contains the styles for that content) loaded.\nSolution: Ensure all elements you want styled in the critical css appears in the HTML of the url (or html file) you send Penthouse. You can also use the `forceInclude` parameter to force styles to remain in the critical css.\n\n#### Special glyphs not showing/showing incorrectly\n\nProblems with special characters like &#8594; after converting? Make sure you use the correct hexadecimal format in your CSS. You can always get this format from your browser console, by entering '&#8594;'`.charCodeAt(0).toString(16)` (answer for this arrow glyph is `2192`). When using hexadecimal format in CSS it needs to be prepended with a backslash, like so: `\\2192` (f.e. `content: '\\2192';`)\n\n### Other problems\n\n#### Penthouse errors\nCheck that the filepath to the repo you are running Penthouse from does not contain any unusual characters - they are [known to cause problems](https://github.com/pocketjoso/penthouse/issues/156#issuecomment-299729664).\n",
  "readmeFilename": "README.md",
  "_id": "penthouse@0.11.13",
  "dist": {
    "shasum": "d202ae25d9082afc9d3f626781007d352b3ac19b"
  },
  "_from": "penthouse@^0.11.13",
  "_resolved": "https://registry.npmjs.org/penthouse/-/penthouse-0.11.13.tgz"
}
