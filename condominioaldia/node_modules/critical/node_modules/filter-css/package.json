{
  "name": "filter-css",
  "version": "0.1.2",
  "description": "Filter CSS rules",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/bezoerb/filter-css"
  },
  "author": {
    "name": "Ben Zörb",
    "email": "ben@sommerlaune.com",
    "url": "sommerlaune.com"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "jshint . && mocha test/*.js"
  },
  "files": [
    "index.js",
    "cli.js"
  ],
  "bin": {
    "filtercss": "cli.js"
  },
  "keywords": [
    "css",
    "filter",
    "parse"
  ],
  "dependencies": {
    "css": "^2.2.0",
    "get-stdin": "^5.0.1",
    "lodash": "^4.13.1",
    "meow": "^3.1.0",
    "update-notifier": "^0.7.0"
  },
  "devDependencies": {
    "chai": "^3.5.0",
    "jshint": "^2.7.0",
    "mocha": "^2.2.4"
  },
  "readme": "# filter-css [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Build status][appveyor-image]][appveyor-url] [![Dependency Status][depstat-image]][depstat-url]\n\nFilter CSS rules\n\n\n## Install\n\n```\n$ npm install --save filter-css\n```\n\n\n## Usage\n\n```js\nvar filterCss = require('filter-css');\nvar filtered = filterCss(<input>, <pattern>, <options>);\n```\n\n#### Input\n\n*Required*  \nType: `String`\n\nCan be a path to the CSS file or a raw CSS string\n\n#### Pattern\n\n*Required*  \nType `String`,`RegExp`, `Function` or an `Array` containing it.\n \nPatterns used to discard specific parts of the CSS. \nThe function is invoked with three arguments (context, value, node).\n                                                   \n* `context` Current matching context. Could be one of `['type','media','selector','declarationProperty','declarationValue']`.\n* `value` Current value.\n* `node` The currently processed AST node generated by [`css`](https://github.com/reworkcss/css).  \n\nReturn true if the element should be discarded. \n \n\n#### Options\n\nPer default `filter-css` will be applied to all parts of the CSS. This behavior can be customized by disabling specific matchers\n\n| Name                       | Type      | Description   |\n| -------------------------- | --------- |-------------- |\n| matchSelectors             | `boolean` | Enable / disable matching of CSS selectors. |\n| matchTypes                 | `boolean` | Enable / disable matching of [AST Node types](https://github.com/reworkcss/css#types) like `font-face`  |\n| matchDeclarationProperties | `boolean` | Enable / disable matching of CSS properties like `background-image` |\n| matchDeclarationValues     | `boolean` | Enable / disable matching of CSS values like `url(...)`\n| matchMedia                 | `boolean` | Enable / disable matching of media queries like `min-device-pixel-ratio: 2` |\n\n\n## Examples\n\n```css\n.bigBackground {\n\twidth: 100%;\n\theight: 100%;\n\tbackground-image: url('some/big/image.png');\n}\n\n@font-face {\n\tfont-family: 'My awesome font';\n}\n\n@media print {\n    ...\n}\n```\n\n```js\nvar filterCss = require('filter-css');\n\nfilterCss('test/fixtures/test.css',[/url\\(/,'@font-face',/print/]);\n```\n\n```css\n.bigBackground {\n\twidth: 100%;\n\theight: 100%;\n}\n```\n\n#### Remove all media queries\n\n```js\nvar filterCss = require('filter-css');\n\nfilterCss('test/fixtures/test.css',/.*/,{\n\tmatchSelectors: false,\n\tmatchTypes: false,\n\tmatchDeclarationProperties: false,\n\tmatchDeclarationValues: false,\n\tmatchMedia: true\n});\n```\n\n\n#### Using a function matcher\n\n```js\nvar filterCss = require('filter-css');\n\nfilterCss('test/fixtures/test.css',function(context, value, node) {\n\treturn context === 'declarationValue' && value === \"url('some/big/image.png')\"\n});\n\n```\n\n#### Complete Example \n```js\nfilterCss('test/fixtures/test.css', {\n    types: ['@font-face'],\n    selectors: ['.my-selector > p'],\n    declarations: [/url/]\n});\n```\n\n## CLI\n\nfilter-css works well with standard input.\n\n```shell\n$ cat test/fixture/test.css | filtercss --ignore @font-face\n```\nYou can also pass in the file as an option.\n```shell\n$ filtercss test/fixture/test.css --ignore @font-face\n```\n\n#### CLI options\n\nSee `filtercss --help` for a full list of options.\n\n## License\n\nMIT © [Ben Zörb](http://sommerlaune.com)\n\n[npm-url]: https://npmjs.org/package/filter-css\n[npm-image]: https://badge.fury.io/js/filter-css.svg\n\n[travis-url]: https://travis-ci.org/bezoerb/filter-css\n[travis-image]: https://travis-ci.org/bezoerb/filter-css.svg?branch=master\n\n[appveyor-url]: https://ci.appveyor.com/project/bezoerb/filter-css/branch/master\n[appveyor-image]: https://ci.appveyor.com/api/projects/status/xypps7lx2usx3akp/branch/master?svg=true\n\n[depstat-url]: https://david-dm.org/bezoerb/filter-css\n[depstat-image]: https://david-dm.org/bezoerb/filter-css.svg\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/bezoerb/filter-css/issues"
  },
  "_id": "filter-css@0.1.2",
  "dist": {
    "shasum": "6a76521ee6cb8950fee2ab9a5db6e985afe8c91b"
  },
  "_from": "filter-css@^0.1.2",
  "_resolved": "https://registry.npmjs.org/filter-css/-/filter-css-0.1.2.tgz"
}
